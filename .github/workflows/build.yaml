name: Rust-Cargo Build

on:
  push:
    paths:
      - '**'
      - '!.github/**'
      - '.github/workflows/build.yaml'
  workflow_dispatch:
    inputs:
      version:
        description: Terracotta Version
        type: string

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  name: terracotta
  RUST_BACKTRACE: full

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: windows-latest
            os: windows
            arch: x86_64
            target: x86_64-pc-windows-msvc
            components: rust-src
            args: >-
              --release
              -Z build-std=core,std,alloc,proc_macro,panic_abort
              -Z build-std-features=default,optimize_for_size
          - runs-on: windows-latest
            os: windows
            arch: x86_64
            target: x86_64-pc-windows-gnu
            components: rust-src
            args: >-
              --release
              -Z build-std=core,std,alloc,proc_macro,panic_abort
              -Z build-std-features=default,optimize_for_size
          - runs-on: windows-11-arm
            os: windows
            arch: arm64
            target: aarch64-pc-windows-msvc
            components: rust-src
            args: >-
              --release
              -Z build-std=core,std,alloc,proc_macro,panic_abort
              -Z build-std-features=default,optimize_for_size
          - runs-on: ubuntu-24.04
            os: linux
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            components: rust-src
            args: >-
              --release
              -Z build-std=core,std,alloc,proc_macro,panic_abort
              -Z build-std-features=default,optimize_for_size
          - runs-on: ubuntu-24.04
            os: linux
            arch: x86_64
            target: x86_64-unknown-linux-musl
            components: rust-src
            args: >-
              --release
              -Z build-std=core,std,alloc,proc_macro,panic_abort
              -Z build-std-features=default,optimize_for_size
          - runs-on: ubuntu-24.04-arm
            os: linux
            arch: arm64
            target: aarch64-unknown-linux-gnu
            components: rust-src
            args: >-
              --release
              -Z build-std=core,std,alloc,proc_macro,panic_abort
              -Z build-std-features=default,optimize_for_size
          - runs-on: ubuntu-24.04-arm
            os: linux
            arch: arm64
            target: aarch64-unknown-linux-musl
            components: rust-src
            args: >-
              --release
              -Z build-std=core,std,alloc,proc_macro,panic_abort
              -Z build-std-features=default,optimize_for_size
          - runs-on: ubuntu-24.04
            os: linux
            arch: riscv64
            target: riscv64gc-unknown-linux-gnu
            args: --release
          - runs-on: ubuntu-24.04
            os: linux
            arch: riscv64
            target: riscv64gc-unknown-linux-musl
            args: --release
          - runs-on: ubuntu-24.04
            os: linux
            arch: loongarch64
            target: loongarch64-unknown-linux-gnu
            args: --release
          - runs-on: ubuntu-24.04
            os: linux
            arch: loongarch64
            target: loongarch64-unknown-linux-musl
            args: --release
          - runs-on: ubuntu-24.04
            os: freebsd
            arch: x86_64
            target: x86_64-unknown-freebsd
            args: --release
          - runs-on: macos-15-intel
            os: macos
            arch: x86_64
            target: x86_64-apple-darwin
            components: rust-src
            args: >-
              --release
              -Z build-std=core,std,alloc,proc_macro,panic_abort
              -Z build-std-features=default,optimize_for_size
          - runs-on: macos-latest
            os: macos
            arch: arm64
            target: aarch64-apple-darwin
            components: rust-src
            args: >-
              --release
              -Z build-std=core,std,alloc,proc_macro,panic_abort
              -Z build-std-features=default,optimize_for_size
    runs-on: ${{ matrix.runs-on }}
    name: Build (${{ matrix.target }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        uses: neveler/actions-rust-cross@v1
        env:
          RUSTFLAGS: -Zunstable-options -Cpanic=immediate-abort
        with:
          command: build
          toolchain: nightly
          target: ${{ matrix.target }}
          components: ${{ matrix.components }}
          args: ${{ matrix.args }}
          strip: true
      - name: Upload Artifact
        uses: actions/upload-artifact@v5
        with:
          name: terracotta-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/terracotta${{ matrix.os == 'windows' && '.exe' || '' }}
          retention-days: 1
      - if: ${{ matrix.os == 'macos' && runner.os == 'macOS' }}
        name: Package Artifact
        run: |
          cp "target/${{ matrix.target }}/release/terracotta" "build/macos/terracotta.app/Contents/MacOS/terracotta"
          pkgbuild \
            --root "build/macos" \
            --identifier "net.burningtnt.terracotta" \
            --version "1.0" \
            --install-location "/Applications" \
            --scripts build/macos/scripts \
            --component-plist build/macos/terracotta.plist \
            target/${{ matrix.target }}/release/terracotta.pkg
      - if: ${{ matrix.os == 'macos' && runner.os == 'macOS' }}
        name: Upload Package Artifact
        uses: actions/upload-artifact@v5
        with:
          name: terracotta-${{ matrix.target }}.pkg
          path: target/${{ matrix.target }}/release/terracotta.pkg
          retention-days: 1
  assemble-packages:
    runs-on: ubuntu-latest
    name: Assemble Artifact
    needs:
      - build
    steps:
      - name: Compute Version
        run: |
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "TERRACOTTA_VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
          else
            echo "TERRACOTTA_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi
      - name: Download Artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: terracotta-*
      - name: Assemble Artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for dir in terracotta-*; do
            [[ -d "$dir" ]] || continue
            if [[ -f "$dir/terracotta.pkg" ]]; then
              mv "$dir/terracotta.pkg" "terracotta-${{ env.TERRACOTTA_VERSION }}-${dir#terracotta-}"
            elif [[ -f "$dir/terracotta.exe" ]]; then
              mv "$dir/terracotta.exe" "terracotta-${{ env.TERRACOTTA_VERSION }}-${dir#terracotta-}.exe"
            elif [[ -f "$dir/terracotta" ]]; then
              mv "$dir/terracotta" "terracotta-${{ env.TERRACOTTA_VERSION }}-${dir#terracotta-}"
            fi
          done
          if [ ! -z "${{ github.event.inputs.version }}" ]; then
            gh release create v"${{ github.event.inputs.version }}" -R "${{ github.repository }}" --draft --generate-notes terracotta-${{ env.TERRACOTTA_VERSION }}-*
          fi
